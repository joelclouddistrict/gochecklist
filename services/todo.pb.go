// Code generated by protoc-gen-go. DO NOT EDIT.
// source: services/todo.proto

/*
Package services is a generated protocol buffer package.

It is generated from these files:
	services/todo.proto

It has these top-level messages:
	IdMessage
	TodoMessage
	TodoArray
	TodoFilter
*/
package services

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type IdMessage struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *IdMessage) Reset()                    { *m = IdMessage{} }
func (m *IdMessage) String() string            { return proto.CompactTextString(m) }
func (*IdMessage) ProtoMessage()               {}
func (*IdMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *IdMessage) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type TodoMessage struct {
	Id   int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Task string `protobuf:"bytes,2,opt,name=task" json:"task,omitempty"`
	Done bool   `protobuf:"varint,3,opt,name=done" json:"done,omitempty"`
}

func (m *TodoMessage) Reset()                    { *m = TodoMessage{} }
func (m *TodoMessage) String() string            { return proto.CompactTextString(m) }
func (*TodoMessage) ProtoMessage()               {}
func (*TodoMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TodoMessage) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TodoMessage) GetTask() string {
	if m != nil {
		return m.Task
	}
	return ""
}

func (m *TodoMessage) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

type TodoArray struct {
	Todos []*TodoMessage `protobuf:"bytes,1,rep,name=todos" json:"todos,omitempty"`
	Total int32          `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
}

func (m *TodoArray) Reset()                    { *m = TodoArray{} }
func (m *TodoArray) String() string            { return proto.CompactTextString(m) }
func (*TodoArray) ProtoMessage()               {}
func (*TodoArray) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TodoArray) GetTodos() []*TodoMessage {
	if m != nil {
		return m.Todos
	}
	return nil
}

func (m *TodoArray) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type TodoFilter struct {
	Offset int32  `protobuf:"varint,1,opt,name=offset" json:"offset,omitempty"`
	Limit  int32  `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	Terms  string `protobuf:"bytes,3,opt,name=terms" json:"terms,omitempty"`
	// 0 for all, 1 for done, 2 for undone
	Done int32 `protobuf:"varint,4,opt,name=done" json:"done,omitempty"`
}

func (m *TodoFilter) Reset()                    { *m = TodoFilter{} }
func (m *TodoFilter) String() string            { return proto.CompactTextString(m) }
func (*TodoFilter) ProtoMessage()               {}
func (*TodoFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TodoFilter) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *TodoFilter) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *TodoFilter) GetTerms() string {
	if m != nil {
		return m.Terms
	}
	return ""
}

func (m *TodoFilter) GetDone() int32 {
	if m != nil {
		return m.Done
	}
	return 0
}

func init() {
	proto.RegisterType((*IdMessage)(nil), "services.IdMessage")
	proto.RegisterType((*TodoMessage)(nil), "services.TodoMessage")
	proto.RegisterType((*TodoArray)(nil), "services.TodoArray")
	proto.RegisterType((*TodoFilter)(nil), "services.TodoFilter")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TodoService service

type TodoServiceClient interface {
	CreateTodo(ctx context.Context, in *TodoMessage, opts ...grpc.CallOption) (*TodoMessage, error)
	ListTodos(ctx context.Context, in *TodoFilter, opts ...grpc.CallOption) (*TodoArray, error)
	GetTodo(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*TodoMessage, error)
	SetAsDone(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*TodoMessage, error)
	SetAsUndone(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*TodoMessage, error)
	DeleteTodo(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type todoServiceClient struct {
	cc *grpc.ClientConn
}

func NewTodoServiceClient(cc *grpc.ClientConn) TodoServiceClient {
	return &todoServiceClient{cc}
}

func (c *todoServiceClient) CreateTodo(ctx context.Context, in *TodoMessage, opts ...grpc.CallOption) (*TodoMessage, error) {
	out := new(TodoMessage)
	err := grpc.Invoke(ctx, "/services.TodoService/CreateTodo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) ListTodos(ctx context.Context, in *TodoFilter, opts ...grpc.CallOption) (*TodoArray, error) {
	out := new(TodoArray)
	err := grpc.Invoke(ctx, "/services.TodoService/ListTodos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) GetTodo(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*TodoMessage, error) {
	out := new(TodoMessage)
	err := grpc.Invoke(ctx, "/services.TodoService/GetTodo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) SetAsDone(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*TodoMessage, error) {
	out := new(TodoMessage)
	err := grpc.Invoke(ctx, "/services.TodoService/SetAsDone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) SetAsUndone(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*TodoMessage, error) {
	out := new(TodoMessage)
	err := grpc.Invoke(ctx, "/services.TodoService/SetAsUndone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) DeleteTodo(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/services.TodoService/DeleteTodo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TodoService service

type TodoServiceServer interface {
	CreateTodo(context.Context, *TodoMessage) (*TodoMessage, error)
	ListTodos(context.Context, *TodoFilter) (*TodoArray, error)
	GetTodo(context.Context, *IdMessage) (*TodoMessage, error)
	SetAsDone(context.Context, *IdMessage) (*TodoMessage, error)
	SetAsUndone(context.Context, *IdMessage) (*TodoMessage, error)
	DeleteTodo(context.Context, *IdMessage) (*google_protobuf1.Empty, error)
}

func RegisterTodoServiceServer(s *grpc.Server, srv TodoServiceServer) {
	s.RegisterService(&_TodoService_serviceDesc, srv)
}

func _TodoService_CreateTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).CreateTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.TodoService/CreateTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).CreateTodo(ctx, req.(*TodoMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_ListTodos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).ListTodos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.TodoService/ListTodos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).ListTodos(ctx, req.(*TodoFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_GetTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).GetTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.TodoService/GetTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).GetTodo(ctx, req.(*IdMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_SetAsDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).SetAsDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.TodoService/SetAsDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).SetAsDone(ctx, req.(*IdMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_SetAsUndone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).SetAsUndone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.TodoService/SetAsUndone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).SetAsUndone(ctx, req.(*IdMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_DeleteTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).DeleteTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.TodoService/DeleteTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).DeleteTodo(ctx, req.(*IdMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _TodoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "services.TodoService",
	HandlerType: (*TodoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTodo",
			Handler:    _TodoService_CreateTodo_Handler,
		},
		{
			MethodName: "ListTodos",
			Handler:    _TodoService_ListTodos_Handler,
		},
		{
			MethodName: "GetTodo",
			Handler:    _TodoService_GetTodo_Handler,
		},
		{
			MethodName: "SetAsDone",
			Handler:    _TodoService_SetAsDone_Handler,
		},
		{
			MethodName: "SetAsUndone",
			Handler:    _TodoService_SetAsUndone_Handler,
		},
		{
			MethodName: "DeleteTodo",
			Handler:    _TodoService_DeleteTodo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/todo.proto",
}

func init() { proto.RegisterFile("services/todo.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 433 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xe5, 0xa4, 0x09, 0xf1, 0x58, 0x54, 0x30, 0xa1, 0x25, 0x72, 0x40, 0xb2, 0x7c, 0xb2,
	0x8a, 0x64, 0x4b, 0xe5, 0xc6, 0xad, 0xa2, 0x2d, 0x02, 0xd1, 0x1e, 0xdc, 0x20, 0x71, 0xdd, 0xb2,
	0x93, 0x68, 0x85, 0xe3, 0x8d, 0xbc, 0x5b, 0xa4, 0x0a, 0x71, 0xe1, 0x15, 0x78, 0x34, 0x5e, 0x81,
	0x07, 0xe0, 0x11, 0xaa, 0x9d, 0xb5, 0x2b, 0x57, 0x4a, 0x0f, 0xb9, 0xed, 0xcc, 0xfe, 0xfb, 0xed,
	0xff, 0xef, 0x0e, 0x4c, 0x0d, 0x35, 0x3f, 0xd4, 0x37, 0x32, 0x85, 0xd5, 0x52, 0xe7, 0x9b, 0x46,
	0x5b, 0x8d, 0x93, 0xae, 0x19, 0xbf, 0x5a, 0x69, 0xbd, 0xaa, 0xa8, 0x10, 0x1b, 0x55, 0x88, 0xba,
	0xd6, 0x56, 0x58, 0xa5, 0x6b, 0xe3, 0x75, 0xf1, 0xbc, 0xdd, 0xe5, 0xea, 0xfa, 0x66, 0x59, 0xd0,
	0x7a, 0x63, 0x6f, 0xfd, 0x66, 0x3a, 0x87, 0xf0, 0xa3, 0xbc, 0x20, 0x63, 0xc4, 0x8a, 0x70, 0x1f,
	0x06, 0x4a, 0xce, 0x82, 0x24, 0xc8, 0x46, 0xe5, 0x40, 0xc9, 0xf4, 0x0c, 0xa2, 0x85, 0x96, 0xfa,
	0x91, 0x6d, 0x44, 0xd8, 0xb3, 0xc2, 0x7c, 0x9f, 0x0d, 0x92, 0x20, 0x0b, 0x4b, 0x5e, 0xbb, 0x9e,
	0xd4, 0x35, 0xcd, 0x86, 0x49, 0x90, 0x4d, 0x4a, 0x5e, 0xa7, 0x97, 0x10, 0x3a, 0xcc, 0x49, 0xd3,
	0x88, 0x5b, 0x7c, 0x03, 0x23, 0x97, 0xc1, 0xcc, 0x82, 0x64, 0x98, 0x45, 0xc7, 0x07, 0x79, 0x97,
	0x22, 0xef, 0x5d, 0x55, 0x7a, 0x0d, 0xbe, 0x70, 0x62, 0x2b, 0x2a, 0xbe, 0x62, 0x54, 0xfa, 0x22,
	0x95, 0x00, 0x4e, 0x7b, 0xae, 0x2a, 0x4b, 0x0d, 0x1e, 0xc2, 0x58, 0x2f, 0x97, 0x86, 0x6c, 0xeb,
	0xac, 0xad, 0xdc, 0xd9, 0x4a, 0xad, 0x95, 0xed, 0xce, 0x72, 0xc1, 0x44, 0x6a, 0xd6, 0x86, 0x0d,
	0x86, 0xa5, 0x2f, 0xee, 0x5d, 0xef, 0xb1, 0x94, 0xd7, 0xc7, 0xff, 0x87, 0x3e, 0xfd, 0x95, 0xf7,
	0x87, 0x17, 0x00, 0xef, 0x1b, 0x12, 0x96, 0x5c, 0x13, 0xb7, 0xfb, 0x8e, 0xb7, 0xb7, 0xd3, 0xe7,
	0xbf, 0xff, 0xfe, 0xfb, 0x33, 0x88, 0xd2, 0x31, 0xff, 0x9f, 0x79, 0x17, 0x1c, 0xe1, 0x39, 0x84,
	0x9f, 0x95, 0xb1, 0x0b, 0x9f, 0xf3, 0xe1, 0x31, 0x9f, 0x2c, 0x9e, 0x3e, 0xec, 0xf2, 0xfb, 0xa5,
	0xfb, 0x8c, 0x9a, 0x60, 0x8b, 0xc2, 0x4f, 0xf0, 0xe4, 0x03, 0x31, 0x06, 0x7b, 0xfa, 0xfb, 0x3f,
	0x7d, 0xcc, 0xd1, 0x94, 0x31, 0x4f, 0x31, 0xf2, 0x98, 0xe2, 0xa7, 0x92, 0xbf, 0x70, 0x01, 0xe1,
	0x15, 0xd9, 0x13, 0x73, 0xaa, 0x6b, 0xda, 0x89, 0x36, 0x67, 0xda, 0x41, 0xfc, 0xac, 0x47, 0x2b,
	0xdc, 0x2b, 0xba, 0xa4, 0x5f, 0x21, 0x62, 0xea, 0x97, 0x5a, 0xee, 0xca, 0x7d, 0xcd, 0xdc, 0x97,
	0x31, 0xf6, 0xb9, 0x37, 0x75, 0x47, 0xbe, 0x04, 0x38, 0xa5, 0x8a, 0xda, 0x2f, 0xd9, 0x0a, 0x3e,
	0xcc, 0xfd, 0xf4, 0xe7, 0xdd, 0xf4, 0xe7, 0x67, 0x6e, 0xfa, 0xbb, 0xfc, 0x47, 0xfd, 0xfc, 0xd7,
	0x63, 0x16, 0xbd, 0xbd, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xcf, 0xd1, 0x2e, 0x07, 0x6f, 0x03, 0x00,
	0x00,
}
